# üß† Velociraptor es una herramienta de DFIR de respuesta a incidentes que ayuda a investigar incidencias en tiempo real.
# üêß Lo voy a dejar configurado y lo voy a utilizar exclusivamente cuando pase algo sospechoso o grave.
#===========================================================================================================================
[ü¶ñINSTALACI√ìN ETHERNET]:
# Versiones                            : https://github.com/Velocidex/velociraptor/releases
# Documentaci√≥n oficial                : https://github.com/Velocidex/velociraptor?tab=readme-ov-file
# Documentaci√≥n oficial                : https://github.com/Velocidex/velociraptor
# Documentaci√≥n oficial                : https://docs.velociraptor.app/

#=========================================================================================================================
[ü¶ñINSTALACIONES]::
# instalaciones 
apt update
apt upgrade -y

# creo una carpeta en el contenedor e instalo el script
mkdir /KIRIBAKO && cd /KIRIBAKO
apt install vim -y
vim script-00.sh
# i - (shift + bot√≥n derecho):
--------------------------------------------------------------------------------------
    # c√≥digo de /SCRIPTS/script-00.sh de este github
--------------------------------------------------------------------------------------

# doy permisos y hago la instalaci√≥n
chmod +x script-00.sh
./script-00.sh
source ~/.bashrc

#===========================================================================================================================
[ü¶ñINSTALACI√ìN SERVIDOR-VELOCIRAPTOR EN LINUX]:
# Herramientas b√°sicas
apt update && sudo apt install -y wget unzip openssl

# Descargar binario
# Comprobar la √∫ltima versi√≥n antes de descargar : https://github.com/Velocidex/velociraptor/releases
apt install wget -y
wget https://github.com/Velocidex/velociraptor/releases/latest/download/velociraptor-v0.74.1-linux-amd64 -O velociraptor
chmod +x velociraptor
mv velociraptor /usr/local/bin/

# Inicializar configuraci√≥n y genera el archivo server.config.yaml
velociraptor config generate -i
    > Self Signed SSL
    > Linux
    > /opt/velociraptor
    > logs
    > 1 Year
    > localhost
    > None - Configure DNS manually
    > y
  # Frontend (servidor principal)
  # Puerto del servidor (por defecto: 8000 frontend / 8889 GUI)
  # Habilita Web UI
  # Crea certificados (mTLS incluidos)
  # Guarda el archivo final como server.config.yaml
  # ‚ö†Ô∏è cuando me pregunte por el usuario y contrase√±a puedo crear tantos usuarios como quiera
  # cuando quiera dejar de agregar usuario dejo una sola vez los campos vacios, pulsando dos intros para pasar al siguiente apartado
    > usuario: root
    > contrase√±a: ****
# genera un archivo parecido a velociraptor_server_0.74.1_amd64.deb, que es el instalador del servidor para montar otro servidor
velociraptor --config server.config.yaml debian server
# Genera la configuraci√≥n del cliente a partir de la configuraci√≥n del servidor y la guarda en client.config.yaml
velociraptor --config server.config.yaml config client > client.config.yaml

# (Opcional) Ejecutarlo como servicio systemd
vim /etc/systemd/system/velociraptor.service
-------------------------------------------------------------------
[Unit]
Description=Velociraptor Server
After=network.target

[Service]
ExecStart=/usr/local/bin/velociraptor --config /KIRIBAKO/server.config.yaml frontend
Restart=always
User=root

[Install]
WantedBy=multi-user.target
-------------------------------------------------------------------

# modifico el archivo 
vim /KIRIBAKO/server.config.yaml
-------------------------------------------------------------------
# dentro de larchivo busco los 127.0.0.1 y los cambio por 0.0.0.0
# esto hace que se pueda escucha fuera de la m√°quina (dentro del mismo host)
-------------------------------------------------------------------

# activar
sudo systemctl daemon-reexec
sudo systemctl enable --now velociraptor

# comprobar si escucha el puerto
sudo ss -tuln | grep 8889 

# pruebo en navegador
https://<IP_SERVIDOR_LINUX>:8889

#===========================================================================================================================
[ü¶ñCONFIGURACI√ìN DEL AGENTE]:
# üîÅ este proceso tengo que repetirlo por cada cliente (agente)

# velociraptor necesita crear un agente para conectar con el dispositivo cliente
# como anteriormente ya he creado la configuraci√≥n del cliente compruebo que tengo el archivo 
find /KIRIBAKO/client.config.yaml
    # /KIRIBAKO/client.config.yaml

# genero el binario que me va a generar el archivo de instalaci√≥n seg√∫n la distribuci√≥n de linux o el s.o
# en mi caso lo voy hacer para un servicor debian
# velociraptor --config client.config.yaml windows client
velociraptor --config client.config.yaml debian client

# migro el archivo desde la m√°quina principal 
exit
cp /var/lib/lxc/vm-velociraptor/rootfs/KIRIBAKO/velociraptor_client_0.74.1_amd64.deb /var/lib/lxc/vm-apache/rootfs/KIRIBAKO/

# entro en la m√°quina del agente (que en este caso es vm-apache) e instalo el paquete
cd /KIRIBAKO
sudo dpkg -i velociraptor_client_0.74.1_amd64.deb

# cambio la configuraci√≥n
vim /etc/velociraptor/client.config.yaml
-------------------------------------------------------------------
...
server_urls:
  - https://<IP_DEL_SERVIDOR_VELOCIRAPTOR>:8000/                    # el puerto 8000 es la api por la que se van a transmitir los agentes
...
-------------------------------------------------------------------

# creo un servicio 
sudo vim /etc/systemd/system/velociraptor-client.service
-------------------------------------------------------------------
[Unit]
Description=Velociraptor Client
After=network.target

[Service]
ExecStart=/usr/local/bin/velociraptor_client --config /etc/velociraptor/client.config.yaml client
Restart=always
User=root

[Install]
WantedBy=multi-user.target
-------------------------------------------------------------------

# habilito servicios
sudo systemctl daemon-reexec
systemctl start velociraptor-client
systemctl enable velociraptor-client
systemctl status velociraptor-client


#===========================================================================================================================
[ü¶ñCONFIGURACI√ìN INTERFACE WEB]:
# me dirijo a la interface y activo los clientes (agentes/SNMP)
https://<IP_DEL_SERVIDOR_VELOCIRAPTOR>:8889/

# üîç pulso en search clients que en las nuevas versiones es pulsando en la lupa del buscador 
# lo activo y pulso en "Client ID", con esto desabilito m√°s opciones de la interface de los clientes

# üóÇÔ∏è artifacts     :: m√≥dulos predefinidos escritos en VQL (Velociraptor Query Language) que saben qu√© datos recolectar y c√≥mo hacerlo (tambi√©n pueden ser desarrollados).
# üóÇÔ∏è hunts         :: es un job orquestado donde selecciono artifacts de forma masiva o programada sobre los clientes.
#                   + en un caso habitual solo voy a configurar directamente los hunt (las b√∫squedas), cuando agrego un hunt se agrega autom√°ticamente su artifacts al men√∫.

# ü¶ñ velociraptor es una herramienta de ciberseguridad que se usa principalmente para cuando pasa algo sospechoso o grave (como un ataque)
# Generic.Client.Info
# el hunt Generic.Client.Info invoca el Artifact del mismo nombren del servidor cliente para conocer el inventario b√°sico
Hunt manager > New Hunt 
    > Include condition: Run everywhere
    > Exclude condition: Run everywhere
> Select Artifacts
    > Generic.Client.Info
> Launch

# ü¶ñ otros hunt que puedo configurar:
+------------------------------------+----------------------------------------+-----------------------------------------------------------------------+
| Tarea                              | Artifact / Hunt                        | Para qu√© sirve                                                        |
+------------------------------------+----------------------------------------+-----------------------------------------------------------------------+
| Listar procesos                    | Generic.System.PsList                  | Ver qu√© procesos corren y detectar ‚Äúextra√±os‚Äù.                        |
| Conexiones de red                  | Generic.System.Netstat                 | Ver puertos abiertos y conexiones activas.                            |
| M√≥dulos de kernel cargados         | Linux.System.KernelModules             | Asegurar s√≥lo m√≥dulos deseados.                                       |
| Servicios habilitados (systemd)    | Linux.System.Services                  | Identificar daemons y su estado.                                      |
| Usuarios locales                   | Linux.System.Users.LocalAccounts       | Comprobar usuarios, shells y UID.                                     |
| Listado de paquetes instalados     | Linux.System.Packages                  | Inventario de versiones de software.                                  |
| Tareas programadas (cron)          | Linux.System.Crontab                   | Ver cronjobs de todos los usuarios.                                   |
| Integridad de ficheros cr√≠ticos    | Linux.File.Integrity                   | Detectar cambios no autorizados en /etc, etc.                         |
| Archivos modificados               | Linux.File.ModificationTimes           | Detectar modificaciones en archivos importantes.                      |
| Logs del sistema                   | Linux.System.Logs                      | Verificaci√≥n de logs para actividades sospechosas.                    |
| Verificaci√≥n de firewalls          | Linux.Network.FirewallStatus           | Asegurar la configuraci√≥n del firewall.                               |
| Tiempos de arranque                | Linux.System.Uptime                    | Verificar cu√°ndo se inici√≥ el sistema.                                |
| Llamadas a funciones de kernel     | Linux.System.KernelSysCalls            | Detectar actividades sospechosas en el kernel.                        |
| Accesos a archivos importantes     | Linux.File.AccessLog                   | Ver qu√© usuarios han accedido a archivos cr√≠ticos.                    |
| Directorios en uso                 | Linux.System.FileDescriptors           | Ver qu√© archivos est√°n siendo usados por procesos.                    |
| Llamadas a scripts shell           | Linux.System.BashHistory               | Ver comandos ejecutados en bash.                                      |
| Tiempos de conexi√≥n a red          | Linux.Network.ConnectionTimes          | Verificar tiempos de conexi√≥n para detectar patrones.                 |
| Actividades en el sistema          | Linux.System.ProcessesByUser           | Ver qu√© procesos son ejecutados por qu√© usuario.                      |
| Archivos de configuraci√≥n          | Linux.File.ConfigurationFiles          | Comprobar la integridad de archivos de configuraci√≥n.                 |
| Detecci√≥n de rootkits              | Linux.System.RootkitDetection          | Identificar rootkits en el sistema.                                   |
| Verificaci√≥n de m√≥dulos cargados   | Linux.System.ModuleFiles               | Comprobar los m√≥dulos cargados en el sistema.                         |
| Archivos de usuario ocultos        | Linux.File.HiddenFiles                 | Detectar archivos ocultos o an√≥malos en el sistema.                   |
| Comandos de red ejecutados         | Linux.Network.CommandHistory           | Ver qu√© comandos de red han sido ejecutados.                          |
| Detecci√≥n de procesos inyectados   | Linux.System.InjectedProcesses         | Detectar si hay procesos inyectados por un atacante.                  |
| Actividades de mount/unmount       | Linux.System.MountActivity             | Ver qu√© dispositivos est√°n siendo montados/desmontados.               |
| Sesiones SSH activas               | Linux.System.SSHSessions               | Verificar si hay sesiones SSH activas.                                |
| Usuarios y grupos de sudo          | Linux.System.Sudoers                   | Comprobar qui√©n tiene privilegios de sudo.                            |
| Almacenamiento de credenciales     | Linux.System.Passwords                 | Buscar archivos que contienen contrase√±as o credenciales.             |
| Claves SSH almacenadas             | Linux.File.SSHKeys                     | Buscar claves SSH almacenadas en el sistema.                          |
| An√°lisis de logs de autenticaci√≥n  | Linux.System.AuthLogs                  | Buscar intentos fallidos de autenticaci√≥n o accesos sospechosos.      |
| Configuraci√≥n de Sudo              | Linux.System.Sudoers                   | Verificar configuraciones de sudo y posibles escaladas de privilegios.|
| Informaci√≥n sobre el kernel        | Linux.System.KernelInfo                | Obtener informaci√≥n sobre el kernel utilizado.                        |
| Conexiones de red (SSH)            | Linux.Network.SSHConnections           | Ver conexiones SSH activas e inactivas.                               |
| Informaci√≥n de los usuarios        | Linux.System.Users.All                 | Obtener una lista de todos los usuarios en el sistema.                |
| Informaci√≥n sobre mounts           | Linux.System.MountInfo                 | Verificar dispositivos montados en el sistema.                        |
| Conexiones VPN                     | Linux.Network.VPNConnections           | Monitorear conexiones VPN activas.                                    |
| Informaci√≥n de interfaces de red   | Linux.Network.Interfaces               | Obtener informaci√≥n sobre las interfaces de red.                      |
| Actividades en dispositivos USB    | Linux.System.USBActivity               | Monitorear actividades sospechosas en puertos USB.                    |
| Estad√≠sticas de uso de disco       | Linux.System.DiskUsage                 | Verificar el uso del disco y posibles cambios.                        |
| Verificaci√≥n de hostname           | Linux.System.Hostname                  | Comprobar que el hostname no ha sido cambiado.                        |
| Listado de procesos por UID        | Linux.System.ProcessByUID              | Ver qu√© procesos est√°n asociados a qu√© UID.                           |
| Revisi√≥n de rutas de acceso        | Linux.System.PATH                      | Ver qu√© rutas de acceso a binarios est√°n configuradas.                |
| Informaci√≥n sobre grupos           | Linux.System.Groups                    | Ver grupos y sus miembros.                                            |
| An√°lisis de scripts maliciosos     | Linux.System.MaliciousScripts          | Detectar la presencia de scripts maliciosos.                          |
| An√°lisis de puertos abiertos       | Linux.Network.PortScan                 | Realizar escaneo de puertos para detectar servicios expuestos.        |
| Informaci√≥n sobre logs de seguridad| Linux.System.SecurityLogs              | Revisi√≥n de logs de seguridad del sistema.                            |
+------------------------------------+----------------------------------------+-----------------------------------------------------------------------+

# otro ejemplo...
# permitir ver los mapeos de memoria de procesos en Linux
Hunt manager > New Hunt 
    > Tag: Linux-memoria
    > Orgs: <USUARIO_ADMIN>
    > Start Hunt Immediately
> Select Artifacts
    > Linux.Sys.Maps
> Configure parameters
    > processRegex: .*                                     # filtra todos los procesos por su ruta de ejecuci√≥n
> Specify Resources
    > CPU Limit Percent: 25                                # suficiente para no saturar el sistema
    > IOps/Sec: 50                                         # o m√°s si el host es potente
    > Max Execution Time in Seconds: 300                   # (5 minutos) es un valor razonable
    > Max Idle Time in Seconds: 60                         # 60 o 120 segundos
    > Max Rows: 10000                                      # puedes ajustar seg√∫n tus necesidades
    > Max Logs: 10000
    > Max MB uploaded: 50                                  # 50 o 100 (depende de cu√°nto esperes obtener)
    > Trace Frequency Seconds: 10
    > Urgent: [x] Skip queues and run query urgently       # omitir colas y ejecutar consultas con urgencia
