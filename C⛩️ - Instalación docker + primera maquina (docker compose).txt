#=========================================================================================================================
[⛩️WHITE WHALE]::
# Guia de instalación debian       : https://docs.docker.com/engine/install/debian/
# Guía de instalación volumenes    : https://docs.docker.com/storage/volumes/

#=========================================================================================================================
[⛩️RESUMEN PROYECTO · MÁQUINAS LABORATORÍO]:
# 🧑‍🎓 Dentro de un servidor Debian, voy a crear con docker-compose un conjunto de máquinas que me sirvan como virtualizador de servidores 
# 🧑‍🎓 Cada máquina dispondra de un solo volúmen, para persistir los datos. En dicho volúmen voy a guardar las carpetas de configuración necsarias para el funcionamiento de la máquina
# 🧑‍🎓 Cada volúmen, dentro de cada máquina, dispondrá de dos modulos:    
      # script-00.sh: para la instalación inicial del servidor
      # sistemas de carpetas: archivos importantes del servicio utilizado para dicha máquina
# 🧑‍🎓 El servidor principal dispondrá de un alias que ejecuta un script para inicializar las maquinas
# 🧑‍🎓 Todas las imágenes docker-compose estarán en modo bridge con los puertos necesarios abiertos a excepción de la máquina para pentesting que estará en modo host debido a que quiero utilizarla más adelante y no quiero estas pendiente de modificar los puertos para cada prueba de pentesting.

#=========================================================================================================================
[⛩️INSTALACIÓN]:
# si tengo instalado docker desinstalo todos los paquetes en conflicto
for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done

# instalar repositorio de Docker
  # Agregue la clave GPG oficial de Docker
  sudo apt-get update
  sudo apt-get install ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc
  
  # Agregar el repositorio a las fuentes de Apt
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update

# instalar última versión docker
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# inicializo docker y lo activo al iniciar la sesión
sudo systemctl start docker
sudo systemctl enable docker

#=========================================================================================================================
[⛩️DOCKER COMPOSE]:
# instalo jq necesario para completar la instalación de docker-compose
apt install jq 

# Me descargo docker-compose
sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# Doy permisos de ejecución
sudo chmod +x /usr/local/bin/docker-compose

# Compruebo que se a instalado
docker-compose --version

# creo una carpeta para los archivos docker-compose
mkdir docker-compose

# 🧑‍🎓 Tengo que crear los archivos .yml (que se muestran en el siguiente apartado "D🐋") para los archivos docker-compose

# Para lanzar el contendor en segundo plano y activar el contenedor lo hago con el siguiente comando
docker-compose -f docker-compose-samba.yml up -d

# Compruebo que el contenedor está lanzado
docker ps
# Compruebo todos los contenedores
docker ps -a

# acceder al contenedor 
docker exec -it vm1-samba bash

#=========================================================================================================================
[🧑‍🎓MANTENIMIENTO DE DOCKER-COMPOSE]:
# creo un volumen 
# Con docker-compose le mando crear un volumen por lo que una vez generada la máquina no es necesario crear su volumen, así que este apartado me lo salto

## 🧑‍🎓 Volúmenes de Docker: 
# Para que los cambios en tus contenedores sean persistentes, debes utilizar volúmenes de Docker. Los volúmenes permiten que los datos se mantengan incluso cuando el contenedor se detenga o se elimine.

## Lógica de VOLUMENES::
  # para crear un volumen
  # docker volume create docker-compose_vol-vm1-samba

  # inspecciono volumenes para ver las propiedades
  # docker volume inspect docker-compose_vol-vm1-samba

  # lista los volumenes 
  # docker volume ls

  # eliminar un volumen
  # docker volume rm docker-compose_vol-vm1-samba

  # eliminar docker-compose
  # docker ps -a
  # docker stop vm1-smb
  # docker rm vm1-smb
  # si es necesario elimino el volumen y la imagen docker
  # rm /docker-compose/docker-compose-samba.yml

## 🧑‍🎓 Máquinas de Docker compose: 
## Lógica de MAQUINAS::
  # apagar maquina
  # docker-compose -f docker-compose-samba.yml down

  # eliminar la máquina sin los vólumenes asociados
  # docker-compose -f docker-compose-samba.yml rm

  # eliminar la máquina con los volúmenes asociados (-v)
  # docker-compose -f docker-compose-samba.yml down -v
