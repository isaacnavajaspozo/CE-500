# üß† Este servidor se utiliza como 
# üêß

#=========================================================================================================================
[ü™ñüì© ce-500]::
# Documentaci√≥n oficial kismet :             https://www.kismetwireless.net/docs/readme/installing/linux/
# documentaci√≥n oficial clamav :             https://docs.clamav.net/

#=========================================================================================================================
[ü™ñüì©INSTALACIONES]::
# instalaciones 
apt update
apt upgrade -y

## ssh
## desde la consola del contenedor a trav√©s de proxmox
# Amplio tiempo de ssh y deshabilitar la suspensi√≥n
systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target

# Realizo unos cambios en el archivo de configuraci√≥n
nano /etc/ssh/sshd_config
----------------------------------------------------------------------------
    Port 22
    PasswordAuthentication yes
    PermitRootLogin yes
----------------------------------------------------------------------------

# Inicializo el servicio y lo habilito para inicio de la sesi√≥n
systemctl start sshd
systemctl enable sshd
systemctl status sshd

# reinicio
reboot now

# creo una carpeta en el contenedor e instalo el script
mkdir /ce-500 && cd /ce-500
apt install vim -y
vim script-00.sh
# i - (shift + bot√≥n derecho):
--------------------------------------------------------------------------------------
    # c√≥digo de /SCRIPTS/script-00.sh de este github
--------------------------------------------------------------------------------------

# doy permisos y hago la instalaci√≥n
chmod +x script-00.sh
./script-00.sh
source ~/.bashrc

#=========================================================================================================================
[ü™ñüì© INSTALAR ANTIVIRUS]::
# paquetes de Linux de utilizaci√≥n r√°pida y pr√°ctica (escaneres):
# üíØ realizo la instalaci√≥n de un antivirus para automatizar el escaner de archivos corruptos en el servidor

# instalaci√≥n antivirus Linux:
## üëπ clamav::
apt install clamav
apt install clamav-freshclam
# busco actualizaciones en la base de datos
sudo freshclam
# escaneo manualmente el sistema
# clamscan -[par√°metros] [ruta de carpeta]
# sudo clamscan -r /
sudo clamscan -r /home

# üëπ formas de uso con clamav:
# guardo un registro de archivos infectados
sudo clamscan -l /ruta/al/archivo.txt -r /ruta/al/directorio

# mandar archivo a cuarentena (para no causar da√±o al servidor):
# sudo clamscan --move=/path/to/quarantine -r /ruta/al/directorio
sudo clamscan --move=/path/to/quarantine -r /ruta/al/directorio -l /ruta/al/archivo.txt

# borrar archivos maliciosos:
# sudo clamscan --remove -r /ruta/al/directorio
sudo clamscan --remove -r /ruta/al/directorio -l /ruta/al/archivo.txt

# actualizar base de datos 
sudo freshclam

# lo que puedo hacer es un cron y un alias para que automatice el an√°lisis de virus. 
# üÜó


#=========================================================================================================================
[ü™ñüì© MENSAJES PROGRAMADOS]::
# üß† enviar√° cad d√≠a un mensaje programado a la misma hora (siempre que lo haya), ordenando los archivos a enviar por orden.
# üß† una vez enviado, se clasifica el mensaje dentro de la carpeta /enviados de la misma ruta y aunque permanezca en el servidor no se volver√° a mandar dicho mensaje.
# üß† al mover el mensaje a la carpeta enviados le cambia el nombre por la fecha y luego su nombree original para que no sobreescriban. Ej: 20250619_082815_nombre.txt

# creo una carpeta con los mensajes
mkdir /isaac/mensajes

# instalo postfix
apt install postfix
    - web

# üëçüìÆ creo el script en el caso que el correo remitente sea de dominio
vim enviar-mensaje.sh
--------------------------------------------------------------------------
#!/bin/bash

CARPETA="/isaac/mensajes"
DESTINO="to@dominio.es"               # DESTINO="primero@dominio.com, segundo@dominio.com, tercero@dominio.com"
DESTINO_OCULTO="bcc@dominio.com"      # DESTINO_OCULTO="primero@dominio.com, segundo@dominio.com, tercero@dominio.com"
ASUNTO="Nuevo mensaje"
REMITENTE="from@dominio.es"           # correo real
DESTINO_ENVIADOS="$CARPETA/enviados"

# Crear carpeta de enviados si no existe
mkdir -p "$DESTINO_ENVIADOS"

# Buscar el primer archivo por orden
archivo=$(ls "$CARPETA"/*.txt 2>/dev/null | sort | head -n 1)

if [ -n "$archivo" ]; then
    echo "Enviando: $archivo a $DESTINO (BCC: $DESTINO_OCULTO)"

    (
        echo "Subject: $ASUNTO"
        echo "From: $REMITENTE"
        echo "To: $DESTINO"
        echo "Bcc: $DESTINO_OCULTO"
        echo "Content-Type: text/plain; charset=utf-8"
        echo
        cat "$archivo"
    ) | sendmail -f "$REMITENTE" -t

    if [ $? -eq 0 ]; then
        echo "Correo enviado exitosamente."
        nombre=$(basename "$archivo")
        timestamp=$(date +%Y%m%d_%H%M%S)
        mv "$archivo" "$DESTINO_ENVIADOS/${timestamp}_$nombre"
    else
        echo "Error al enviar el correo."
    fi
else
    echo "No hay mensajes pendientes por enviar."
fi
--------------------------------------------------------------------------







# esta  es otra forma mejorada de crear el mismo script de arriba
# no hay que crear los dos es una alternativa al de arriba
# adem√°s de algunos cambios, agrego una variable ENVIO_ACTIVADO que si esta en true finaliza el envio pero si no esta en true no se va  realizar envio
vim enviar-mensaje.sh
-----------------------------------------------------------------
#!/bin/bash
set -euo pipefail

CARPETA="/isaac/mensajes"
DESTINO="to@dominio.es"
DESTINO_OCULTO="bcc@dominio.com"
ASUNTO="Nuevo mensaje"
REMITENTE="from@dominio.es"
DESTINO_ENVIADOS="$CARPETA/enviados"
ENVIO_ACTIVADO="true"
# ENVIO_ACTIVADO= "false" :: ocurre lo siguiente:
#    - No crea la carpeta de enviados (mkdir -p "$DESTINO_ENVIADOS").
#    - No busca el archivo .txt" pendiente.
#    - No lo mueve, ni lo marca como le√≠do, ni lo env√≠a.

Sale inmediatamente con exit 0.

if [[ "$ENVIO_ACTIVADO" != "true" ]]; then
    echo "Env√≠o desactivado. No se enviar√°n mensajes."
    exit 0
fi

mkdir -p "$DESTINO_ENVIADOS"

archivo=$(find "$CARPETA" -maxdepth 1 -type f -name '*.txt' | sort | head -n 1 || true)

if [[ -n "$archivo" ]]; then
    echo "Enviando: $archivo a $DESTINO (BCC: $DESTINO_OCULTO)"

    {
        echo "Subject: $ASUNTO"
        echo "From: $REMITENTE"
        echo "To: $DESTINO"
        echo "Bcc: $DESTINO_OCULTO"
        echo "Content-Type: text/plain; charset=utf-8"
        echo
        cat "$archivo"
    } | sendmail -f "$REMITENTE" -t

    echo "Correo enviado exitosamente."

    nombre=$(basename "$archivo")
    timestamp=$(date +%Y%m%d_%H%M%S)
    mv "$archivo" "$DESTINO_ENVIADOS/${timestamp}_$nombre"
else
    echo "No hay mensajes pendientes por enviar."
fi
-----------------------------------------------------------------

















# üëçüìÆ creo el script en el caso de que mi correo remitente sea un cliente como gmail (servidor intermedio - relay) 
vim enviar-mensaje.sh
--------------------------------------------------------------------------
#!/bin/bash
### === CONFIGURACI√ìN DEL CORREO === ###
GMAIL_USER="from@gmail.com"
APP_PASSWORD="contrase√±a_de_aplicaci√≥n_de_google"
CARPETA="/isaac/mensajes"
DESTINO="to@gmail.com"
DESTINO_OCULTO="bcc@gmail.com"
ASUNTO="Nuevo mensaje"
REMITENTE="$GMAIL_USER"
DESTINO_ENVIADOS="$CARPETA/enviados"

### === FUNCIONES === ###

configurar_postfix() {
    echo "üì¨ Configurando Postfix para usar Gmail como relay..."

    # Configurar main.cf con Gmail
    postconf -e "relayhost = [smtp.gmail.com]:587"
    postconf -e "smtp_use_tls = yes"
    postconf -e "smtp_sasl_auth_enable = yes"
    postconf -e "smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd"
    postconf -e "smtp_sasl_security_options = noanonymous"
    postconf -e "smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt"

    # Credenciales de Gmail
    echo "[smtp.gmail.com]:587 $GMAIL_USER:$APP_PASSWORD" > /etc/postfix/sasl_passwd
    chmod 600 /etc/postfix/sasl_passwd
    postmap /etc/postfix/sasl_passwd

    # Reiniciar Postfix
    systemctl restart postfix
}

verificar_postfix_configurado() {
    grep -q "smtp.gmail.com" /etc/postfix/main.cf
    return $?
}

### === INICIO DEL SCRIPT === ###

# Verificar configuraci√≥n de Postfix
if verificar_postfix_configurado; then
    echo "‚úÖ Postfix ya est√° configurado con Gmail."
else
    configurar_postfix
fi

# Crear carpeta de enviados si no existe
mkdir -p "$DESTINO_ENVIADOS"

# Buscar el primer archivo por orden
archivo=$(ls "$CARPETA"/*.txt 2>/dev/null | sort | head -n 1)

if [ -n "$archivo" ]; then
    echo "üì§ Enviando: $archivo a $DESTINO (BCC: $DESTINO_OCULTO)"

    (
        echo "Subject: $ASUNTO"
        echo "From: $REMITENTE"
        echo "To: $DESTINO"
        echo "Bcc: $DESTINO_OCULTO"
        echo "Content-Type: text/plain; charset=utf-8"
        echo
        cat "$archivo"
    ) | sendmail -f "$REMITENTE" -t

    echo "üì¨ Cargando mensaje mendiente..."

    if [ $? -eq 0 ]; then
        echo "‚úÖ Correo enviado exitosamente."
        nombre=$(basename "$archivo")
        timestamp=$(date +%Y%m%d_%H%M%S)
        mv "$archivo" "$DESTINO_ENVIADOS/${timestamp}_$nombre"
    else
        echo "‚ùå El mensaje NO se pudo enviar."
    fi
else
    echo "üì≠ No hay mensajes pendientes por enviar."
fi
--------------------------------------------------------------------------


# el mismo cambio que antes pero adaptado a gmail
vim enviar-mensaje.sh
-----------------------------------------------------------------
#!/bin/bash
set -euo pipefail

### === CONFIGURACI√ìN DEL CORREO === ###
GMAIL_USER="from@gmail.com"
APP_PASSWORD="contrase√±a_app_google"
CARPETA="/isaac/mensajes"
DESTINO="to@gmail.com"
DESTINO_OCULTO="bcc@gmail.com"
ASUNTO="Nuevo mensaje"
REMITENTE="$GMAIL_USER"
DESTINO_ENVIADOS="$CARPETA/enviados"
ENVIO_ACTIVADO="true"

### === FUNCIONES === ###
configurar_postfix() {
    echo "üì¨ Configurando Postfix para usar Gmail como relay..."

    cat <<EOF > /etc/postfix/main.cf
relayhost = [smtp.gmail.com]:587
smtp_use_tls = yes
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
smtp_sasl_security_options = noanonymous
smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
EOF

    echo "[smtp.gmail.com]:587 $GMAIL_USER:$APP_PASSWORD" > /etc/postfix/sasl_passwd
    chmod 600 /etc/postfix/sasl_passwd
    postmap /etc/postfix/sasl_passwd

    systemctl restart postfix
}

verificar_postfix_configurado() {
    grep -q "\[smtp.gmail.com\]:587" /etc/postfix/main.cf
}

### === INICIO === ###
if [[ "$ENVIO_ACTIVADO" != "true" ]]; then
    echo "üö´ Env√≠o desactivado. No se enviar√°n mensajes."
    exit 0
fi

if ! verificar_postfix_configurado; then
    configurar_postfix
else
    echo "‚úÖ Postfix ya est√° configurado con Gmail."
fi

mkdir -p "$DESTINO_ENVIADOS"

archivo=$(find "$CARPETA" -maxdepth 1 -type f -name '*.txt' | sort | head -n 1 || true)

if [[ -n "$archivo" ]]; then
    echo "üì§ Enviando: $(basename "$archivo") a $DESTINO (BCC: $DESTINO_OCULTO)"

    {
        echo "Subject: $ASUNTO"
        echo "From: $REMITENTE"
        echo "To: $DESTINO"
        echo "Bcc: $DESTINO_OCULTO"
        echo "Content-Type: text/plain; charset=utf-8"
        echo
        cat "$archivo"
    } | sendmail -f "$REMITENTE" -t

    if [[ $? -eq 0 ]]; then
        echo "‚úÖ Correo enviado correctamente."
        nombre=$(basename "$archivo")
        timestamp=$(date +%Y%m%d_%H%M%S)
        mv "$archivo" "$DESTINO_ENVIADOS/${timestamp}_$nombre"
    else
        echo "‚ùå Error al enviar el correo."
    fi
else
    echo "üì≠ No hay mensajes pendientes por enviar."
fi
-----------------------------------------------------------------









# doy permisos al script
chmod 770 enviar-mensaje.sh

# creo un mensaje de ejemplo
cd /isaac/mensajes
vim 1.txt
--------------------------------------------------------------------------
[03-12-2021] ¬∑ Unidad 77:
Avance de tropas.
Recuento de inventario: completado.
--------------------------------------------------------------------------

# creo un cron que envie el mensaje todos los d√≠as a las 11 de la ma√±ana
apt install cron
crontab -e
--------------------------------------------------------------------------
0 11 * * * /isaac/enviar-mensaje.sh
--------------------------------------------------------------------------

# pruebo script
cd /isaac
./enviar-mensaje.sh
tail -50 /var/log/mail.log


#=========================================================================================================================
[ü™ñüì© PROYECTOS DE RADIOFRECUENCIA]::

## üì∂ Kismet::
# kismet es una herramienta de detecci√≥n de redes inal√°mbricas que se utiliza principalmente para la detecci√≥n de redes Wi-Fi y la captura de paquetes, pero se pueden encontrar principalmente estos tipos de redes:
  # Wi-Fi (802.11 a/b/g/n/ac/ax):              Redes Wi-Fi est√°ndar, tanto en modo monitor como administraci√≥n.
  # Bluetooth:                                 Soporta captura de tr√°fico Bluetooth cl√°sico y BLE (Bluetooth Low Energy).
  # Zigbee:                                    Redes de IoT basadas en Zigbee.
  # NRF24:                                     Redes basadas en chips Nordic NRF24 (como MouseJack).
  # SDR (Software Defined Radio):              Usando dispositivos como RTL-SDR para capturar se√±ales de radiofrecuencia, ADS-B, etc.
  # Ubertooth:                                 Para capturar tr√°fico Bluetooth con hardware Ubertooth (si est√° instalado).
  # KillerBee:                                 Redes Zigbee y otras redes de RF compatibles con KillerBee.
  # Radiacode USB:                             Soporte para ciertas radios usadas en drones.
  # ANTSDR DroneID:                            Captura se√±ales de identificaci√≥n de drones que usan protocolos espec√≠ficos (como DJI).

# paquetes necesarios para la instalaci√≥n:
sudo apt update
sudo apt install git build-essential pkg-config cmake

sudo apt install \
libmicrohttpd-dev libnl-3-dev libnl-genl-3-dev libcap-dev libpcap-dev \
libsqlite3-dev libpcre2-dev libprotobuf-c-dev protobuf-c-compiler protobuf-compiler \
libssl-dev libwebsockets-dev libusb-1.0-0-dev librtlsdr-dev libmosquitto-dev libsensors4-dev lm-sensors

# instalaci√≥n del servicio desde el paquete original:
# https://github.com/kismetwireless/kismet
git clone https://www.kismetwireless.net/git/kismet.git
cd kismet
./configure
# en el caso de que sea una m√°quina virtual
# ./configure --disable-lmsensors
make -j$(nproc)
sudo make install

# crear grupo kismet y a√±adir tu usuario
sudo groupadd kismet
sudo usermod -aG kismet $USER

# cerrar sesi√≥n o reiniciar el shell
newgrp kismet

# dar permisos a interfaces para captura
sudo setcap cap_net_raw,cap_net_admin=eip /usr/local/bin/kismet

# (Opcional) Parar NetworkManager para evitar interferencias
# sudo systemctl stop NetworkManager
vim /etc/NetworkManager/NetworkManager.conf
--------------------------------------------------------------------------
  [keyfile]
  unmanaged-devices=interface-name:wlan0;interface-name:wlan1
--------------------------------------------------------------------------
sudo systemctl restart NetworkManager

# ejecuto Kismet
kismet

# abro el navegador
http://localhost:2501



## detector de peque√±os satelites con LORA





## üì∂ SDR++
# recibir y visualizar se√±ales de radio en tiempo real desde dispositivos SDR (RTL-SDR, HackRF, Airspy, etc.).
# instalar dependencias b√°sicas
sudo apt update
sudo apt install build-essential cmake git qtbase5-dev libfftw3-dev libusb-1.0-0-dev libzstd-dev libglfw3-dev libvolk2-dev libairspy-dev librtaudio-dev libhackrf-dev libiio-dev libad9361-dev 

# clonar el repositorio oficial
git clone https://github.com/AlexandreRouma/SDRPlusPlus.git
cd SDRPlusPlus

# crear carpeta de compilaci√≥n y compilar
mkdir build
cd build
cmake ..
make -j$(nproc)

# ejecutar el ejecutable de SDR++
./sdrpp

# 




## üõ©Ô∏è Hackrf: 
# es necesario un hardwware:
+-------------------+---------------+----------------------+----------------------------------------------+
| Dispositivo       | Precio aprox  | Frecuencia           | Uso principal                                |
+-------------------+---------------+----------------------+----------------------------------------------+
| RTL-SDR v3        | 30-40 ‚Ç¨       | ~24 MHz ‚Äì 1.7 GHz    | Detecci√≥n RF, Kismet, ADS-B, an√°lisis b√°sico |
| Nooelec NESDR     | 30-50 ‚Ç¨       | Igual al RTL-SDR     | Alternativa con mejor blindaje               |
| Airspy R2         | 150 ‚Ç¨         | ~24 MHz ‚Äì 1.8 GHz    | Mayor ancho de banda, m√°s sensibilidad       |
+-------------------+---------------+----------------------+----------------------------------------------+

# Instalar GNU Radio
sudo apt update
sudo apt install gnuradio gnuradio-dev gr-osmosdr

# Instalar HackRF tools
sudo apt install hackrf
hackrf_info

# Dar permisos de acceso
sudo tee /etc/udev/rules.d/53-hackrf.rules <<EOF
SUBSYSTEM=="usb", ATTRS{idVendor}=="1d50", ATTRS{idProduct}=="6089", GROUP="plugdev", MODE="0666"
EOF

sudo udevadm control --reload-rules
sudo udevadm trigger

# Probar captura r√°pida
hackrf_transfer -r test.iq -f 433920000 -s 2000000 -n 2000000














-
# esc√°ner de vulnerabilidades web en CLI. B√°sico para identificar problemas comunes en servidores HTTP.
## üì∂ Nikpto::
sudo apt install nikto
# nikto -h http://objetivo.com           # no es stealth
nikto -h http://objetivo.com \
  -Tuning 2 \                                                        # escaneo limitado a vulnerabilidades de configuraci√≥n/archivos.
  -useragent "Mozilla/5.0 (Windows NT 10.0; Win64; x64)" \           # simula navegador real (evita bloqueos por bot).
  -delay 5 \                                                         # 5 segundos entre peticiones.
  -timeout 10 \                                                      # espera m√°xima por respuesta.
  -evasion 1 \                                                       # codifica con %20 (espacios URL), prueba otros -evasion 1‚Äì9.
  -no404 \                                                           # evita falsos positivos con detecci√≥n de p√°ginas 404 personalizadas.
  -Format txt -output nikto_stealth.txt                              # salida en texto plano.
