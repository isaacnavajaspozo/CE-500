#=========================================================================================================================
[🐋WHITE WHALE]::
# Guia de instalación debian       : https://docs.docker.com/engine/install/debian/
# Guía de instalación volumenes    : https://docs.docker.com/storage/volumes/

#=========================================================================================================================
[🐋RESUMEN PROYECTO · MÁQUINAS LABORATORÍO]:
# 🧑‍🎓 Dentro de un servidor Debian, voy a crear con docker-compose un conjunto de máquinas que me sirvan como virtualizador de servidores 
# 🧑‍🎓 Cada máquina dispondra de un solo volúmen, para persistir los datos. En dicho volúmen voy a guardar las carpetas de configuración necsarias para el funcionamiento de la máquina
# 🧑‍🎓 Cada volúmen, dentro de cada máquina, dispondrá de dos sciprts:    
      # script-00.sh: para la instalación inicial del servidor
      # script-33.sh: para el volcado hacia la máquina o envío hacia el volúmen de las carpetas de configuración
# 🧑‍🎓 El servidor principal dispondrá de un alias por cada máquina para un acceso rápido de la máquina
# 🧑‍🎓 Todas las imágenes docker-compose estarán configuradas en modo host así puedo compartir puertos para distintas máquinas y es más adaptable a los cambios de la máquina, comportandose así como un único servidor pero separando cada máquina de forma independiente y con la posibilidad de apagar o encender cada máquina de forma separada.

#=========================================================================================================================
[🐋INSTALACIÓN]:
# si tengo instalado docker desinstalo todos los paquetes en conflicto
for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done

# instalar repositorio de Docker
  # Agregue la clave GPG oficial de Docker
  sudo apt-get update
  sudo apt-get install ca-certificates curl
  sudo install -m 0755 -d /etc/apt/keyrings
  sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
  sudo chmod a+r /etc/apt/keyrings/docker.asc
  
  # Agregar el repositorio a las fuentes de Apt
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update

# instalar última versión docker
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# inicializao docker y lo activo al iniciar la sesión
sudo systemctl start docker
sudo systemctl enable docker

#=========================================================================================================================
[🐋🔥DOCKER COMPOSE]:
# instalo jq necesario para completar la instalación de docker-compose
apt install jq 

# Me descargo docker-compose
sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

# Doy permisos de ejecución
sudo chmod +x /usr/local/bin/docker-compose

# Compruebo que se a instalado
docker-compose --version

# creo una carpeta para los archivos docker-compose
mkdir docker-compose

# Creo el archivo .yml para el archivo docker-compose
# el archivo por defecto es docker-compose.yml
nano docker-compose-samba.yml
------------------------------------------------------------------------------------------------------------------------------------
      version: "3.9"  # Puedes usar la versión que prefieras, pero 3.9 es una versión reciente y estable.
      
      services:
        vm1-samba:
          image: debian  # Usamos la imagen de Debian
          restart: always  # Esta opción asegura que el contenedor se reinicie automáticamente
          hostname: vm1-samba.whitewhale.local  # Agrego un nombre del host para distinguirlo del servidor principal
          container_name: vm1-samba  # El nombre del contenedor será vm1-samba
          command: bash  # Comando que se ejecutará cuando el contenedor se inicie
          network_mode: host  # El contenedor usará la red del host para comportarse como un único servidor
          volumes:
            - vol-vm1-samba:/docker-volume  # Montamos el volumen en el contenedor
          tty: true  # Mantiene el contenedor en ejecución (similar a -it)
          stdin_open: true  # Permite interacción con el contenedor (similar a -it)
      
      volumes:
        vol-vm1-samba:  # Definimos el volumen que usaremos
------------------------------------------------------------------------------------------------------------------------------------

# Lanzo el contenedor que por defecto docker-compose up -d lanzará docker-compose.override.yml y docker-compose.yml
docker-compose -f docker-compose-samba.yml up -d

# Compruebo que está lanzado
docker ps
docker ps -a

# acceder al contenedor 
docker exec -it vm1-samba bash

#=========================================================================================================================
[🐋🔥VOLUMENES]:
# creo un volumen 
# Con docker-compose le mando crear un volumen por lo que una vez generada la máquina no es necesario crear su volumen, así que este apartado me lo salto

## 🧑‍🎓 Volúmenes de Docker: Para que los cambios en tus contenedores sean persistentes, debes utilizar volúmenes de Docker. Los volúmenes permiten que los datos se mantengan incluso cuando el contenedor se detenga o se elimine.
# docker volume create docker-compose_vol-vm1-samba

  # inspecciono volumenes para ver las propiedades
  # docker volume inspect docker-compose_vol-vm1-samba

  # lista los volumenes 
  # docker volume ls

  # eliminar un volumen
  # docker volume rm docker-compose_vol-vm1-samba

  # eliminar docker-compose
  docker ps -a
  docker stop vm1-smb
  docker rm vm1-smb
  # si es necesario elimino el volumen y la imagen docker
  # rm /docker-compose/docker-compose-samba.yml

#=========================================================================================================================
[🐋🔥CREO ALIAS EN SERVIDOR PRINCIPAL]:
# creo un alias para asignación rápida desde el servidor principal de la máquina docker
echo 'alias _vm1.samba=""docker start -i vm1-samba"' >> ~/.bashrc && source ~/.bashrc

#=========================================================================================================================
[🐋🔥EJECUTAR SCRIPT INICIAL]:
# actualizo los paquetes del contenedor
apt-get update

# creo un archivo 
cd /docker-volume
touch script-00.sh

# doy permiso de ejecución
chmod +x script-00.sh

# instalo nano y pego el código
apt install nano
nano script-00.sh

[SCRIPT script-00.sh]:
--------------------------------------------------------------------------------------------------------------------------
   # Ejecuto el script que tengo en /SCRIPT/script-00.sh de este repositorio GitHub
--------------------------------------------------------------------------------------------------------------------------


#=========================================================================================================================
[🐋🔥COMPROBACIÓN]:
root@b588c1588934:/# 
  # hacer una prueba de crear un archivo en la raíz y después volver a entrar para comprobar que permanece
  touch prueba.txt && ls

  # para salir del contenedor
  exit
  
  # para volver a iniciar contenedor
  docker start -i vm1-samba
  
  # para enumerar los conedores activos 
  docker ps -a

  # comprobar que el archivo existe
  ls
      # prueba.txt

  +---------------------------------------------------------------------------------------------------------------------------------------------+
  |  [FUNCIONAMIENTO DE VOLUMENES]:                                                                                                             |
  |  * Como solo quiero crear un volumen, voy a crear un alias de las carpetas que quiero que se copien a la carpeta del volumen del contenedor |
  |  * De esta manera, cada vez que quiera sustituir los datos del volumen ejecuto el alias                                                     |
  |  * por ejemplo: en un mismo volumen puedo tener la carpeta de /etc/smb y /bin, guardando dentro del volumen: /smb /bin                      |
  |  Para hacer la copia de forma recursiva es: cp -r /etc/smb/ /Docker-volume/                                                                 |
  +---------------------------------------------------------------------------------------------------------------------------------------------+

# Ejecutar alias en máquina docker
echo "alias _force-data='cp -r /etc/smb/ /docker-volume/ && cp -r /bin/ /docker-volume/'" >> ~/.bashrc && source ~/.bashrc && echo "Done: Alias _Force-data added successfully!" || echo "Error: Failed to add alias."


#=========================================================================================================================
[🐋🔥CREO ALIAS EN SERVIDOR PRINCIPAL]:
# creo un alias para asignación rápida desde el servidor principal de la máquina docker
echo 'alias _vm1.samba=""docker start -i vm1-samba"' >> ~/.bashrc && source ~/.bashrc

# por cada contenedor en Docker que necesite:
#    + Tengo que generar un volúmen Docker nuevo "vm1-samba" pero puedo utilizar la misma imagen debian
#    + Tengo un alias en cada contenedor que va a copiar todos los datos de configuración que necesite volcar
#    + Tengo un alias en el servidor principal que va a ejecutar cada contenedor de forma inidividual rápidamente


#=========================================================================================================================
[🐋🔥UNA VEZ YA CREADO EL SERVIDOR]:
# inicializo el contenedor 
docker start vm1-samba

# en el ejemplo de un servidor samba pas olo siguiente para obtener la IP después de iniciar el contenedor
docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' vm1-samba
    # 172.17.0.2


#=========================================================================================================================
[🐋🔥REPETICIÓN]:
# Tengo que crear por cada máquina virtual que quiero hacer en docker:
    # Un volumen:                                             Voy a guardar dentro todas las carpetas de configuración de la máquina.
    # Un archivo de configuración docker-compose:             Voy a crear un archivo .yml para configurar la máquina docker.
    # Un script dentro del alias de la máquina:               Este script va a ser de instalación general, (igual para todas las máquinas).
    # Un script dentro del alias de la máquina:               Opción 1 : cuando se ejecute va a copiar automáticamente todas las carpetas de configuración del servidor. Opción 2: Va a desplegar automaticamentelas carpetas de configuración del volúmen a su ubicación real del servidor.
    # Un alias en la máquina:                                 (Opcional). Un alias de acceso rápido que ejecute el script del volúmen.
    # Un alias em el servidor principal:                      Para ejecutar de forma rápida el servidor de la máquina.


